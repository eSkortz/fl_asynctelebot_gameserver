from email import message
from telebot import types
import sqlite3
import datetime
import os
import asyncio
from telebot.async_telebot import AsyncTeleBot
import config
from database import functions as database_functions
from modules import subsidiary_functions
from modules import input_broker as broker
from modules import start, cars, fishing, discord
from modules.cars_callback import car_list, detail_car

bot = AsyncTeleBot(config.token)
src_path = config.src_path

def make_markup(car_mark, car_id):

    car = database_functions.get_car_from_table_and_carid(car_mark=car_mark, car_id=car_id)
    car_model, car_max_speed, car_cost, car_photo, car_trunk = car[1], car[2], car[3], car[4], car[6]
    if car[5] == 0:
        car_obves = '–ù–µ—Ç –æ–±–≤–µ—Å–æ–≤'
    else:
        car_obves = '–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–≤–µ—Å—ã'

    markup_inline = types.InlineKeyboardMarkup(row_width=1)
    markup_inline.add(types.InlineKeyboardButton(f'üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π {car_mark}', callback_data=f'car_list|{car_mark}|0'))
    match car_mark:
        case 'moto':
            caption = f'üöó –ú–æ–¥–µ–ª—å: {car_model}\n' \
                        f'üóø –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {car_max_speed} –∫–º/—á\n' \
                        f'üí∞ –ì–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç—å: {subsidiary_functions.points_to_cost(car_cost)} —Ä—É–±.\n' \
                        f'‚ôª –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏–≤–∞: {subsidiary_functions.points_to_cost(int(car_cost * 0.75))} —Ä—É–±.\n' \
                        f'üì¶ –ú–µ—Å—Ç –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ: {car_trunk}\n' \
                        f'üëÑ –ù–∞–ª–∏—á–∏–µ –æ–±–≤–µ—Å–æ–≤: {car_obves}\n\n' \
                        f'‚öô –¢—é–Ω–∏–Ω–≥:\n' \
                        f'–§—É–ª–ª —Ç—é–Ω–∏–Ω–≥ —Å —Ç—É—Ä–±–∏–Ω–æ–π - {subsidiary_functions.points_to_cost(int(car_cost * 0.168))} —Ä—É–±.\n' \
                        f'–§—É–ª–ª —Ç—é–Ω–∏–Ω–≥ –±–µ–∑ —Ç—É—Ä–±–∏–Ω—ã - {subsidiary_functions.points_to_cost(int(car_cost * 0.141))} —Ä—É–±.\n\n' \
                        f'–î–≤–∏–≥–∞—Ç–µ–ª—å - {subsidiary_functions.points_to_cost(int(car_cost * 0.063))} —Ä—É–±.\n' \
                        f'–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á - {subsidiary_functions.points_to_cost(int(car_cost * 0.042))} —Ä—É–±.\n' \
                        f'–¢–æ—Ä–º–æ–∑–∞ - {subsidiary_functions.points_to_cost(int(car_cost * 0.036))} —Ä—É–±.\n' \
                        f'–¢—É—Ä–±–∏–Ω–∞ - {subsidiary_functions.points_to_cost(int(car_cost * 0.0345))} —Ä—É–±.\n'
        case 'helicopter':
            caption = f'üöó –ú–æ–¥–µ–ª—å: {car_model}\n' \
                        f'üóø –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {car_max_speed} –∫–º/—á\n' \
                        f'üí∞ –ì–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç—å: {subsidiary_functions.points_to_cost(car_cost)} —Ä—É–±.\n' \
                        f'‚ôª –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏–≤–∞: {subsidiary_functions.points_to_cost(int(car_cost * 0.75))} —Ä—É–±.\n' \
                        f'üì¶ –ú–µ—Å—Ç –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ: {car_trunk}\n' \
                        f'üëÑ –ù–∞–ª–∏—á–∏–µ –æ–±–≤–µ—Å–æ–≤: {car_obves}\n'
        case _:
            caption = f'üöó –ú–æ–¥–µ–ª—å: {car_model}\n' \
                        f'üóø –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {car_max_speed} –∫–º/—á\n' \
                        f'üí∞ –ì–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç—å: {subsidiary_functions.points_to_cost(car_cost)} —Ä—É–±.\n' \
                        f'‚ôª –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏–≤–∞: {subsidiary_functions.points_to_cost(int(car_cost * 0.75))} —Ä—É–±.\n' \
                        f'üì¶ –ú–µ—Å—Ç –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ: {car_trunk}\n' \
                        f'üëÑ –ù–∞–ª–∏—á–∏–µ –æ–±–≤–µ—Å–æ–≤: {car_obves}\n\n' \
                        f'‚öô –¢—é–Ω–∏–Ω–≥:\n' \
                        f'–§—É–ª–ª —Ç—é–Ω–∏–Ω–≥ —Å –≤–Ω–µ—à–∫–æ–π - {subsidiary_functions.points_to_cost(int(car_cost * 0.22125))} —Ä—É–±.\n' \
                        f'–§—É–ª–ª —Ç—é–Ω–∏–Ω–≥ –±–µ–∑ —Ç—É—Ä–±–∏–Ω—ã –∏ –≤–Ω–µ—à–∫–∏' \
                        f' - {subsidiary_functions.points_to_cost(int(car_cost * 0.141))} —Ä—É–±.\n\n' \
                        f'–î–≤–∏–≥–∞—Ç–µ–ª—å - {subsidiary_functions.points_to_cost(int(car_cost * 0.063))} —Ä—É–±.\n' \
                        f'–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á - {subsidiary_functions.points_to_cost(int(car_cost * 0.042))} —Ä—É–±.\n' \
                        f'–¢–æ—Ä–º–æ–∑–∞ - {subsidiary_functions.points_to_cost(int(car_cost * 0.036))} —Ä—É–±.\n' \
                        f'–¢—É—Ä–±–∏–Ω–∞ - {subsidiary_functions.points_to_cost(int(car_cost * 0.0345))} —Ä—É–±.\n\n' \
                        f'–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ - {subsidiary_functions.points_to_cost(int(car_cost * 0.012))} —Ä—É–±.\n' \
                        f'–ö—Å–µ–Ω–æ–Ω/–ù–µ–æ–Ω - {subsidiary_functions.points_to_cost(int(car_cost * 0.018))} —Ä—É–±.\n' \
                        f'–ü—É–ª–µ—Å—Ç–æ–π–∫–∏–µ –ø–æ–∫—Ä—ã—à–∫–∏ - {subsidiary_functions.points_to_cost(int(car_cost * 0.033))} —Ä—É–±.\n' \
                        f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ª–µ—Å/–≤—ã—Å–æ—Ç–∞ –ø–æ–¥–≤–µ—Å–∫–∏' \
                        f' - {subsidiary_functions.points_to_cost(int(car_cost * 0.01))} —Ä—É–±.\n'
    return caption, car_photo, markup_inline
    

async def edit(message, car_mark, car_id):
    caption, car_photo, markup_inline = make_markup(car_mark=car_mark, car_id=car_id)
    await bot.edit_message_media(chat_id=message.chat.id, media=open(f'{car_photo}', 'rb'), reply_markup=markup_inline)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=caption)